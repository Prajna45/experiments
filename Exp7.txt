import tensorflow as tf
from keras.models import Sequential
from keras.layers import Flatten, Dense, Dropout, Activation
from keras.optimizers import Adam
mnist=tf.keras.datasets.mnist
(x_train,y_train),(x_test,y_test) = mnist.load_data()
(x_train,x_test)=(x_train/255.0,x_test/255.0)
model=tf.keras.models.Sequential([
    tf.keras.layers.Flatten(input_shape=(28,28)),
    tf.keras.layers.Dense(512,activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(10,activation='softmax')
])
model.compile(optimizer='SGD',loss='sparse_categorical_crossentropy',metrics=['accuracy'])
tf_callbacks=tf.keras.callbacks.TensorBoard(log_dir='logs/ft',histogram_freq=1)
history=model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=10, callbacks=[tf_callbacks])
%reload_ext tensorboard
%tensorboard --logdir ='logs/fit'
import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train','test'],loc='upper left')
plt.show()
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train','test'],loc='upper left')
plt.show()