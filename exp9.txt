import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
df=pd.read_csv("Iris.csv")
print(df)

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['Species']=le.fit_transform(df['Species'])
print(df['Species'])

df.isnull().sum()
x=df.drop('Species',axis=1)
y_=df['Species']
import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
y1=np.array(y_)
y2=y1.reshape(-1,1)
encoder=OneHotEncoder(sparse_output=False)
y=encoder.fit_transform(y2)
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)
print('xtrain:',x_train.shape)
print('xtest:',x_test.shape)
print('ytrain:',y_train.shape)
print('ytest:',y_test.shape)
model=Sequential()
model.add(Dense(10,input_shape=(5,),activation='relu'))
model.add(Dense(10,activation='relu'))
model.add(Dense(3,activation='softmax'))
model.compile(optimizer='Adam',loss='categorical_crossentropy',metrics=['accuracy'])

import tensorflow as tf
tf_callbacks=tf.keras.callbacks.TensorBoard(log_dir='logs/fit',histogram_freq=1)
history=model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=50,callbacks=[tf_callbacks])
%reload_ext tensorboard
%tensorboard --logdir logs/fit

import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train','test'],loc='upper left')
plt.show()
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train','test'],loc='upper left')
plt.show()